/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanTypes = exports.regenerate = void 0;

require("source-map-support/register");

var _fs = require("fs");

var _util = require("util");

var _devUtils = require("./src/dev-utils");

var _path = require("path");

var _core = require("@babel/core");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _del = _interopRequireDefault(require("del"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _shelljs = _interopRequireDefault(require("shelljs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_shelljs.default.config.silent = true;
_shelljs.default.config.fatal = true;
const paths = {};
paths.flowTyped = 'flow-typed';
paths.flowTypedGitIgnore = `${paths.flowTyped}/.gitignore`;
paths.build = `build`;
paths.buildGitIgnore = `${paths.build}/.gitignore`;
paths.configs = 'config';
paths.packageJson = 'package.json';
paths.launchJson = '.vscode/launch.json';
paths.launchJsonDist = '.vscode/launch.dist.json';
paths.env = '.env';
paths.envDist = 'dist.env';
paths.gitProjectDir = '.git';
paths.gitIgnore = '.gitignore';
paths.packageLockJson = 'package-lock.json';
paths.regenTargets = [`${paths.configs}/*.js`];
const CLI_BANNER = `/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/\n\n`;
const readFileAsync = (0, _util.promisify)(_fs.readFile);

const cleanTypes = async () => {
  (0, _devUtils.populateEnv)();
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.flowTypedGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${paths.flowTyped}/: "${targets.join('" "')}"`);
  (0, _del.default)(targets, {
    cwd: paths.flowTyped
  });
};

exports.cleanTypes = cleanTypes;
cleanTypes.description = `Resets the ${paths.flowTyped} directory to a pristine state`;

const regenerate = () => {
  (0, _devUtils.populateEnv)();
  (0, _fancyLog.default)(`Regenerating targets: "${paths.regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(paths.regenTargets).pipe((0, _gulpTap.default)(file => file.contents = Buffer.from(CLI_BANNER + (0, _core.transformSync)(file.contents.toString(), {
    sourceFileName: (0, _path.relative)(__dirname, file.path)
  }).code))).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9ndWxwZmlsZS5qcyJdLCJuYW1lcyI6WyJzaCIsImNvbmZpZyIsInNpbGVudCIsImZhdGFsIiwicGF0aHMiLCJmbG93VHlwZWQiLCJmbG93VHlwZWRHaXRJZ25vcmUiLCJidWlsZCIsImJ1aWxkR2l0SWdub3JlIiwiY29uZmlncyIsInBhY2thZ2VKc29uIiwibGF1bmNoSnNvbiIsImxhdW5jaEpzb25EaXN0IiwiZW52IiwiZW52RGlzdCIsImdpdFByb2plY3REaXIiLCJnaXRJZ25vcmUiLCJwYWNrYWdlTG9ja0pzb24iLCJyZWdlblRhcmdldHMiLCJDTElfQkFOTkVSIiwicmVhZEZpbGVBc3luYyIsInJlYWRGaWxlIiwiY2xlYW5UeXBlcyIsInRhcmdldHMiLCJqb2luIiwiY3dkIiwiZGVzY3JpcHRpb24iLCJyZWdlbmVyYXRlIiwicHJvY2VzcyIsIkJBQkVMX0VOViIsImd1bHAiLCJzcmMiLCJwaXBlIiwiZmlsZSIsImNvbnRlbnRzIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwic291cmNlRmlsZU5hbWUiLCJfX2Rpcm5hbWUiLCJwYXRoIiwiY29kZSIsImRlc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLGlCQUFHQyxNQUFILENBQVVDLE1BQVYsR0FBbUIsSUFBbkI7QUFDQUYsaUJBQUdDLE1BQUgsQ0FBVUUsS0FBVixHQUFrQixJQUFsQjtBQUVBLE1BQU1DLEtBQUssR0FBRyxFQUFkO0FBRUFBLEtBQUssQ0FBQ0MsU0FBTixHQUFrQixZQUFsQjtBQUNBRCxLQUFLLENBQUNFLGtCQUFOLEdBQTRCLEdBQUVGLEtBQUssQ0FBQ0MsU0FBVSxhQUE5QztBQUNBRCxLQUFLLENBQUNHLEtBQU4sR0FBZSxPQUFmO0FBQ0FILEtBQUssQ0FBQ0ksY0FBTixHQUF3QixHQUFFSixLQUFLLENBQUNHLEtBQU0sYUFBdEM7QUFDQUgsS0FBSyxDQUFDSyxPQUFOLEdBQWdCLFFBQWhCO0FBQ0FMLEtBQUssQ0FBQ00sV0FBTixHQUFvQixjQUFwQjtBQUNBTixLQUFLLENBQUNPLFVBQU4sR0FBbUIscUJBQW5CO0FBQ0FQLEtBQUssQ0FBQ1EsY0FBTixHQUF1QiwwQkFBdkI7QUFDQVIsS0FBSyxDQUFDUyxHQUFOLEdBQVksTUFBWjtBQUNBVCxLQUFLLENBQUNVLE9BQU4sR0FBZ0IsVUFBaEI7QUFDQVYsS0FBSyxDQUFDVyxhQUFOLEdBQXNCLE1BQXRCO0FBQ0FYLEtBQUssQ0FBQ1ksU0FBTixHQUFrQixZQUFsQjtBQUNBWixLQUFLLENBQUNhLGVBQU4sR0FBd0IsbUJBQXhCO0FBRUFiLEtBQUssQ0FBQ2MsWUFBTixHQUFxQixDQUNoQixHQUFFZCxLQUFLLENBQUNLLE9BQVEsT0FEQSxDQUFyQjtBQUlBLE1BQU1VLFVBQVUsR0FBSTs7OztPQUFwQjtBQU1BLE1BQU1DLGFBQWEsR0FBRyxxQkFBVUMsWUFBVixDQUF0Qjs7QUFJQSxNQUFNQyxVQUFVLEdBQUcsWUFBWTtBQUMzQjtBQUVBLFFBQU1DLE9BQU8sR0FBRyw4QkFBZSxNQUFNSCxhQUFhLENBQUNoQixLQUFLLENBQUNFLGtCQUFQLENBQWxDLEVBQWhCO0FBRUEseUJBQUssc0JBQXFCRixLQUFLLENBQUNDLFNBQVUsT0FBTWtCLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLEtBQWIsQ0FBb0IsR0FBcEU7QUFDQSxvQkFBSUQsT0FBSixFQUFhO0FBQUVFLElBQUFBLEdBQUcsRUFBRXJCLEtBQUssQ0FBQ0M7QUFBYixHQUFiO0FBQ0gsQ0FQRDs7O0FBU0FpQixVQUFVLENBQUNJLFdBQVgsR0FBMEIsY0FBYXRCLEtBQUssQ0FBQ0MsU0FBVSxnQ0FBdkQ7O0FBUUEsTUFBTXNCLFVBQVUsR0FBRyxNQUFNO0FBQ3JCO0FBRUEseUJBQUssMEJBQXlCdkIsS0FBSyxDQUFDYyxZQUFOLENBQW1CTSxJQUFuQixDQUF3QixLQUF4QixDQUErQixHQUE3RDtBQUVBSSxFQUFBQSxPQUFPLENBQUNmLEdBQVIsQ0FBWWdCLFNBQVosR0FBd0IsV0FBeEI7QUFFQSxTQUFPQyxjQUFLQyxHQUFMLENBQVMzQixLQUFLLENBQUNjLFlBQWYsRUFDS2MsSUFETCxDQUNVLHNCQUFJQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsUUFBTCxHQUFnQkMsTUFBTSxDQUFDQyxJQUFQLENBQVlqQixVQUFVLEdBQUcseUJBQU1jLElBQUksQ0FBQ0MsUUFBTCxDQUFjRyxRQUFkLEVBQU4sRUFBZ0M7QUFDdkZDLElBQUFBLGNBQWMsRUFBRSxvQkFBUUMsU0FBUixFQUFtQk4sSUFBSSxDQUFDTyxJQUF4QjtBQUR1RSxHQUFoQyxFQUV4REMsSUFGK0IsQ0FBNUIsQ0FEVixFQUlLVCxJQUpMLENBSVVGLGNBQUtZLElBQUwsQ0FBVSxHQUFWLENBSlYsQ0FBUDtBQUtILENBWkQ7OztBQWNBZixVQUFVLENBQUNELFdBQVgsR0FBeUIseUZBQXpCIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuLy8gPyBUbyByZWdlbmVyYXRlIHRoaXMgZmlsZSAoaS5lLiBpZiB5b3UgY2hhbmdlZCBpdCBhbmQgd2FudCB5b3VyIGNoYW5nZXMgdG9cbi8vID8gYmUgcGVybWFuZW50KSwgY2FsbCBgbnBtIHJ1biByZWdlbmVyYXRlYCBhZnRlcndhcmRzXG5cbi8vICEgQmUgc3VyZSB0aGF0IHRhc2tzIGV4cGVjdGVkIHRvIHJ1biBvbiBucG0gaW5zdGFsbCAobWFya2VkIEBkZXBlbmRlbnQpIGhhdmVcbi8vICEgYWxsIHJlcXVpcmVkIHBhY2thZ2VzIGxpc3RlZCB1bmRlciBcImRlcGVuZGVuY2llc1wiIGluc3RlYWQgb2Zcbi8vICEgXCJkZXZEZXBlbmRlbmNpZXNcIiBpbiB0aGlzIHByb2plY3QncyBwYWNrYWdlLmpzb25cblxuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdmcydcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnXG5pbXBvcnQgeyBwb3B1bGF0ZUVudiB9IGZyb20gJy4vc3JjL2Rldi11dGlscydcbmltcG9ydCB7IHJlbGF0aXZlIGFzIHJlbFBhdGggfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgdHJhbnNmb3JtU3luYyBhcyBiYWJlbCB9IGZyb20gJ0BiYWJlbC9jb3JlJ1xuaW1wb3J0IGd1bHAgZnJvbSAnZ3VscCdcbmltcG9ydCB0YXAgZnJvbSAnZ3VscC10YXAnXG5pbXBvcnQgZGVsIGZyb20gJ2RlbCdcbmltcG9ydCBsb2cgZnJvbSAnZmFuY3ktbG9nJ1xuaW1wb3J0IHBhcnNlR2l0SWdub3JlIGZyb20gJ3BhcnNlLWdpdGlnbm9yZSdcbmltcG9ydCBzaCBmcm9tICdzaGVsbGpzJ1xuXG5zaC5jb25maWcuc2lsZW50ID0gdHJ1ZTtcbnNoLmNvbmZpZy5mYXRhbCA9IHRydWU7XG5cbmNvbnN0IHBhdGhzID0ge307XG5cbnBhdGhzLmZsb3dUeXBlZCA9ICdmbG93LXR5cGVkJztcbnBhdGhzLmZsb3dUeXBlZEdpdElnbm9yZSA9IGAke3BhdGhzLmZsb3dUeXBlZH0vLmdpdGlnbm9yZWA7XG5wYXRocy5idWlsZCA9IGBidWlsZGA7XG5wYXRocy5idWlsZEdpdElnbm9yZSA9IGAke3BhdGhzLmJ1aWxkfS8uZ2l0aWdub3JlYDtcbnBhdGhzLmNvbmZpZ3MgPSAnY29uZmlnJztcbnBhdGhzLnBhY2thZ2VKc29uID0gJ3BhY2thZ2UuanNvbic7XG5wYXRocy5sYXVuY2hKc29uID0gJy52c2NvZGUvbGF1bmNoLmpzb24nO1xucGF0aHMubGF1bmNoSnNvbkRpc3QgPSAnLnZzY29kZS9sYXVuY2guZGlzdC5qc29uJztcbnBhdGhzLmVudiA9ICcuZW52JztcbnBhdGhzLmVudkRpc3QgPSAnZGlzdC5lbnYnO1xucGF0aHMuZ2l0UHJvamVjdERpciA9ICcuZ2l0JztcbnBhdGhzLmdpdElnbm9yZSA9ICcuZ2l0aWdub3JlJztcbnBhdGhzLnBhY2thZ2VMb2NrSnNvbiA9ICdwYWNrYWdlLWxvY2suanNvbic7XG5cbnBhdGhzLnJlZ2VuVGFyZ2V0cyA9IFtcbiAgICBgJHtwYXRocy5jb25maWdzfS8qLmpzYFxuXTtcblxuY29uc3QgQ0xJX0JBTk5FUiA9IGAvKipcbiogISEhIERPIE5PVCBFRElUIFRISVMgRklMRSBESVJFQ1RMWSAhISFcbiogISBUaGlzIGZpbGUgaGFzIGJlZW4gZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuIFNlZSB0aGUgY29uZmlnLyouanMgdmVyc2lvbiBvZlxuKiAhIHRoaXMgZmlsZSB0byBtYWtlIHBlcm1hbmVudCBtb2RpZmljYXRpb25zIVxuKi9cXG5cXG5gO1xuXG5jb25zdCByZWFkRmlsZUFzeW5jID0gcHJvbWlzaWZ5KHJlYWRGaWxlKTtcblxuLy8gKiBDTEVBTlRZUEVTXG5cbmNvbnN0IGNsZWFuVHlwZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgcG9wdWxhdGVFbnYoKTtcblxuICAgIGNvbnN0IHRhcmdldHMgPSBwYXJzZUdpdElnbm9yZShhd2FpdCByZWFkRmlsZUFzeW5jKHBhdGhzLmZsb3dUeXBlZEdpdElnbm9yZSkpO1xuXG4gICAgbG9nKGBEZWxldGlvbiB0YXJnZXRzIEAgJHtwYXRocy5mbG93VHlwZWR9LzogXCIke3RhcmdldHMuam9pbignXCIgXCInKX1cImApO1xuICAgIGRlbCh0YXJnZXRzLCB7IGN3ZDogcGF0aHMuZmxvd1R5cGVkIH0pO1xufTtcblxuY2xlYW5UeXBlcy5kZXNjcmlwdGlvbiA9IGBSZXNldHMgdGhlICR7cGF0aHMuZmxvd1R5cGVkfSBkaXJlY3RvcnkgdG8gYSBwcmlzdGluZSBzdGF0ZWA7XG5cbi8vICogUkVHRU5FUkFURVxuXG4vLyA/IElmIHlvdSBjaGFuZ2UgdGhpcyBmdW5jdGlvbiwgcnVuIGBucG0gcnVuIHJlZ2VuZXJhdGVgIHR3aWNlOiBvbmNlIHRvXG4vLyA/IGNvbXBpbGUgdGhpcyBuZXcgZnVuY3Rpb24gYW5kIG9uY2UgYWdhaW4gdG8gY29tcGlsZSBpdHNlbGYgd2l0aCB0aGUgbmV3bHlcbi8vID8gY29tcGlsZWQgbG9naWMuIElmIHRoZXJlIGlzIGFuIGVycm9yIHRoYXQgcHJldmVudHMgcmVnZW5lcmF0aW9uLCB5b3UgY2FuXG4vLyA/IHJ1biBgbnBtIHJ1biBnZW5lcmF0ZWAgdGhlbiBgbnBtIHJ1biByZWdlbmVyYXRlYCBpbnN0ZWFkLlxuY29uc3QgcmVnZW5lcmF0ZSA9ICgpID0+IHtcbiAgICBwb3B1bGF0ZUVudigpO1xuXG4gICAgbG9nKGBSZWdlbmVyYXRpbmcgdGFyZ2V0czogXCIke3BhdGhzLnJlZ2VuVGFyZ2V0cy5qb2luKCdcIiBcIicpfVwiYCk7XG5cbiAgICBwcm9jZXNzLmVudi5CQUJFTF9FTlYgPSAnZ2VuZXJhdG9yJztcblxuICAgIHJldHVybiBndWxwLnNyYyhwYXRocy5yZWdlblRhcmdldHMpXG4gICAgICAgICAgICAgICAucGlwZSh0YXAoZmlsZSA9PiBmaWxlLmNvbnRlbnRzID0gQnVmZmVyLmZyb20oQ0xJX0JBTk5FUiArIGJhYmVsKGZpbGUuY29udGVudHMudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgICAgICAgIHNvdXJjZUZpbGVOYW1lOiByZWxQYXRoKF9fZGlybmFtZSwgZmlsZS5wYXRoKVxuICAgICAgICAgICAgICAgfSkuY29kZSkpKVxuICAgICAgICAgICAgICAgLnBpcGUoZ3VscC5kZXN0KCcuJykpO1xufTtcblxucmVnZW5lcmF0ZS5kZXNjcmlwdGlvbiA9ICdJbnZva2VzIGJhYmVsIG9uIHRoZSBmaWxlcyBpbiBjb25maWcsIHRyYW5zcGlsaW5nIHRoZW0gaW50byB0aGVpciBwcm9qZWN0IHJvb3QgdmVyc2lvbnMnO1xuXG5leHBvcnQgeyByZWdlbmVyYXRlLCBjbGVhblR5cGVzIH07XG4iXX0=