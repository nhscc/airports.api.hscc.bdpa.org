/* @flow */

// ? To regenerate this file (i.e. if you changed it and want your changes to
// ? be permanent), call `npm run regenerate` afterwards

// ! Be sure that tasks expected to run on npm install (marked @dependent) have
// ! all required packages listed under "dependencies" instead of
// ! "devDependencies" in this project's package.json

import { readFile } from 'fs'
import { promisify } from 'util'
import { populateEnv } from './src/dev-utils'
import { relative as relPath } from 'path'
import { transformSync as babel } from '@babel/core'
import gulp from 'gulp'
import tap from 'gulp-tap'
import del from 'del'
import log from 'fancy-log'
import parseGitIgnore from 'parse-gitignore'
import sh from 'shelljs'

sh.config.silent = true;
sh.config.fatal = true;

const paths = {};

paths.flowTyped = 'flow-typed';
paths.flowTypedGitIgnore = `${paths.flowTyped}/.gitignore`;
paths.build = `build`;
paths.buildGitIgnore = `${paths.build}/.gitignore`;
paths.configs = 'config';
paths.packageJson = 'package.json';
paths.launchJson = '.vscode/launch.json';
paths.launchJsonDist = '.vscode/launch.dist.json';
paths.env = '.env';
paths.envDist = 'dist.env';
paths.gitProjectDir = '.git';
paths.gitIgnore = '.gitignore';
paths.packageLockJson = 'package-lock.json';

paths.regenTargets = [
    `${paths.configs}/*.js`
];

const CLI_BANNER = `/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/\n\n`;

const readFileAsync = promisify(readFile);

// * CLEANTYPES

const cleanTypes = async () => {
    populateEnv();

    const targets = parseGitIgnore(await readFileAsync(paths.flowTypedGitIgnore));

    log(`Deletion targets @ ${paths.flowTyped}/: "${targets.join('" "')}"`);
    del(targets, { cwd: paths.flowTyped });
};

cleanTypes.description = `Resets the ${paths.flowTyped} directory to a pristine state`;

// * REGENERATE

// ? If you change this function, run `npm run regenerate` twice: once to
// ? compile this new function and once again to compile itself with the newly
// ? compiled logic. If there is an error that prevents regeneration, you can
// ? run `npm run generate` then `npm run regenerate` instead.
const regenerate = () => {
    populateEnv();

    log(`Regenerating targets: "${paths.regenTargets.join('" "')}"`);

    process.env.BABEL_ENV = 'generator';

    return gulp.src(paths.regenTargets)
               .pipe(tap(file => file.contents = Buffer.from(CLI_BANNER + babel(file.contents.toString(), {
                   sourceFileName: relPath(__dirname, file.path)
               }).code)))
               .pipe(gulp.dest('.'));
};

regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';

export { regenerate, cleanTypes };
