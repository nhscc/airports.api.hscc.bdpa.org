"use strict";

var _bundleAnalyzer = _interopRequireDefault(require("@next/bundle-analyzer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('./src/dev-utils').populateEnv();

const paths = {
  universe: `${__dirname}/src/`,
  multiverse: `${__dirname}/lib/`
};

module.exports = () => {
  return (0, _bundleAnalyzer.default)({
    enabled: process.env.ANALYZE === 'true'
  })({
    distDir: 'build',
    webpack: config => {
      config.resolve && (config.resolve.alias = { ...config.resolve.alias,
        universe: paths.universe,
        multiverse: paths.multiverse
      });
      return config;
    },
    env: {
      FLIGHTS_GENERATE_DAYS: process.env.FLIGHTS_GENERATE_DAYS,
      AIRPORT_NUM_OF_GATE_LETTERS: process.env.AIRPORT_NUM_OF_GATE_LETTERS,
      AIRPORT_GATE_NUMBERS_PER_LETTER: process.env.AIRPORT_GATE_NUMBERS_PER_LETTER,
      RESULTS_PER_PAGE: process.env.RESULTS_PER_PAGE,
      IGNORE_RATE_LIMITS: process.env.IGNORE_RATE_LIMITS,
      LOCKOUT_ALL_KEYS: process.env.LOCKOUT_ALL_KEYS,
      DISALLOWED_METHODS: process.env.DISALLOWED_METHODS,
      REQUESTS_PER_CONTRIVED_ERROR: process.env.REQUESTS_PER_CONTRIVED_ERROR,
      MAX_CONTENT_LENGTH_BYTES: process.env.MAX_CONTENT_LENGTH_BYTES
    },
    experimental: {
      optionalCatchAll: true,

      async rewrites() {
        return [];
      }

    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy50cyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicG9wdWxhdGVFbnYiLCJwYXRocyIsInVuaXZlcnNlIiwiX19kaXJuYW1lIiwibXVsdGl2ZXJzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbmFibGVkIiwicHJvY2VzcyIsImVudiIsIkFOQUxZWkUiLCJkaXN0RGlyIiwid2VicGFjayIsImNvbmZpZyIsInJlc29sdmUiLCJhbGlhcyIsIkZMSUdIVFNfR0VORVJBVEVfREFZUyIsIkFJUlBPUlRfTlVNX09GX0dBVEVfTEVUVEVSUyIsIkFJUlBPUlRfR0FURV9OVU1CRVJTX1BFUl9MRVRURVIiLCJSRVNVTFRTX1BFUl9QQUdFIiwiSUdOT1JFX1JBVEVfTElNSVRTIiwiTE9DS09VVF9BTExfS0VZUyIsIkRJU0FMTE9XRURfTUVUSE9EUyIsIlJFUVVFU1RTX1BFUl9DT05UUklWRURfRVJST1IiLCJNQVhfQ09OVEVOVF9MRU5HVEhfQllURVMiLCJleHBlcmltZW50YWwiLCJvcHRpb25hbENhdGNoQWxsIiwicmV3cml0ZXMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFPQUEsT0FBTyxDQUFDLGlCQUFELENBQVAsQ0FBMkJDLFdBQTNCOztBQUVBLE1BQU1DLEtBQUssR0FBRztBQUNWQyxFQUFBQSxRQUFRLEVBQUcsR0FBRUMsU0FBVSxPQURiO0FBRVZDLEVBQUFBLFVBQVUsRUFBRyxHQUFFRCxTQUFVO0FBRmYsQ0FBZDs7QUFNQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE1BQU07QUFDbkIsU0FBTyw2QkFBbUI7QUFDdEJDLElBQUFBLE9BQU8sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BQVosS0FBd0I7QUFEWCxHQUFuQixFQUVKO0FBRUNDLElBQUFBLE9BQU8sRUFBRSxPQUZWO0FBT0NDLElBQUFBLE9BQU8sRUFBR0MsTUFBRCxJQUEyQjtBQUloQ0EsTUFBQUEsTUFBTSxDQUFDQyxPQUFQLEtBQW1CRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsS0FBZixHQUF1QixFQUN0QyxHQUFHRixNQUFNLENBQUNDLE9BQVAsQ0FBZUMsS0FEb0I7QUFFdENiLFFBQUFBLFFBQVEsRUFBRUQsS0FBSyxDQUFDQyxRQUZzQjtBQUd0Q0UsUUFBQUEsVUFBVSxFQUFFSCxLQUFLLENBQUNHO0FBSG9CLE9BQTFDO0FBT0EsYUFBT1MsTUFBUDtBQUNILEtBbkJGO0FBd0JDSixJQUFBQSxHQUFHLEVBQUU7QUFDRE8sTUFBQUEscUJBQXFCLEVBQUVSLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTyxxQkFEbEM7QUFFREMsTUFBQUEsMkJBQTJCLEVBQUVULE9BQU8sQ0FBQ0MsR0FBUixDQUFZUSwyQkFGeEM7QUFHREMsTUFBQUEsK0JBQStCLEVBQUVWLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUywrQkFINUM7QUFJREMsTUFBQUEsZ0JBQWdCLEVBQUVYLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVSxnQkFKN0I7QUFLREMsTUFBQUEsa0JBQWtCLEVBQUVaLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVyxrQkFML0I7QUFNREMsTUFBQUEsZ0JBQWdCLEVBQUViLE9BQU8sQ0FBQ0MsR0FBUixDQUFZWSxnQkFON0I7QUFPREMsTUFBQUEsa0JBQWtCLEVBQUVkLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYSxrQkFQL0I7QUFRREMsTUFBQUEsNEJBQTRCLEVBQUVmLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYyw0QkFSekM7QUFTREMsTUFBQUEsd0JBQXdCLEVBQUVoQixPQUFPLENBQUNDLEdBQVIsQ0FBWWU7QUFUckMsS0F4Qk47QUFzQ0NDLElBQUFBLFlBQVksRUFBRTtBQUNWQyxNQUFBQSxnQkFBZ0IsRUFBRSxJQURSOztBQUVWLFlBQU1DLFFBQU4sR0FBaUI7QUFDYixlQUFPLEVBQVA7QUFNSDs7QUFUUztBQXRDZixHQUZJLENBQVA7QUFvREgsQ0FyREQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2l0aEJ1bmRsZUFuYWx5emVyIGZyb20gJ0BuZXh0L2J1bmRsZS1hbmFseXplcidcblxuaW1wb3J0IHR5cGUgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnd2VicGFjaydcblxuLy8gPyBOb3QgdXNpbmcgRVM2L1RTIGltcG9ydCBzeW50YXggaGVyZSBiZWNhdXNlIGRldi11dGlscyBoYXMgc3BlY2lhbFxuLy8gPyBjaXJjdW1zdGFuY2VzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVucmVzb2x2ZWQsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbnJlcXVpcmUoJy4vc3JjL2Rldi11dGlscycpLnBvcHVsYXRlRW52KCk7XG5cbmNvbnN0IHBhdGhzID0ge1xuICAgIHVuaXZlcnNlOiBgJHtfX2Rpcm5hbWV9L3NyYy9gLFxuICAgIG11bHRpdmVyc2U6IGAke19fZGlybmFtZX0vbGliL2AsXG4gICAgLy8gdHlwZXMvIGlzIHB1cnBvc2VseSBleGNsdWRlZFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHdpdGhCdW5kbGVBbmFseXplcih7XG4gICAgICAgIGVuYWJsZWQ6IHByb2Nlc3MuZW52LkFOQUxZWkUgPT09ICd0cnVlJ1xuICAgIH0pKHtcbiAgICAgICAgLy8gPyBSZW5hbWVzIHRoZSBidWlsZCBkaXIgXCJidWlsZFwiIGluc3RlYWQgb2YgXCIubmV4dFwiXG4gICAgICAgIGRpc3REaXI6ICdidWlsZCcsXG5cbiAgICAgICAgLy8gPyBXZWJwYWNrIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgLy8gISBOb3RlIHRoYXQgdGhlIHdlYnBhY2sgY29uZmlndXJhdGlvbiBpcyBleGVjdXRlZCB0d2ljZTogb25jZVxuICAgICAgICAvLyAhIHNlcnZlci1zaWRlIGFuZCBvbmNlIGNsaWVudC1zaWRlIVxuICAgICAgICB3ZWJwYWNrOiAoY29uZmlnOiBDb25maWd1cmF0aW9uKSA9PiB7XG4gICAgICAgICAgICAvLyA/IFRoZXNlIGFyZSBhbGlhc2VzIHRoYXQgY2FuIGJlIHVzZWQgZHVyaW5nIEpTIGltcG9ydCBjYWxsc1xuICAgICAgICAgICAgLy8gISBOb3RlIHRoYXQgeW91IG11c3QgYWxzbyBjaGFuZ2UgdGhlc2Ugc2FtZSBhbGlhc2VzIGluIHRzY29uZmlnLmpzb25cbiAgICAgICAgICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiBwYWNrYWdlLmpzb24gKGplc3QpXG4gICAgICAgICAgICBjb25maWcucmVzb2x2ZSAmJiAoY29uZmlnLnJlc29sdmUuYWxpYXMgPSB7XG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLnJlc29sdmUuYWxpYXMsXG4gICAgICAgICAgICAgICAgdW5pdmVyc2U6IHBhdGhzLnVuaXZlcnNlLFxuICAgICAgICAgICAgICAgIG11bHRpdmVyc2U6IHBhdGhzLm11bHRpdmVyc2UsXG4gICAgICAgICAgICAgICAgLy8gdHlwZXMvIGlzIHB1cnBvc2VseSBleGNsdWRlZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gPyBTZWxlY3Qgc29tZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZGVmaW5lZCBpbiAuZW52IHRvIHB1c2ggdG8gdGhlXG4gICAgICAgIC8vID8gY2xpZW50LlxuICAgICAgICAvLyAhISBETyBOT1QgUFVUIEFOWSBTRUNSRVQgRU5WSVJPTk1FTlQgVkFSSUFCTEVTIEhFUkUgISFcbiAgICAgICAgZW52OiB7XG4gICAgICAgICAgICBGTElHSFRTX0dFTkVSQVRFX0RBWVM6IHByb2Nlc3MuZW52LkZMSUdIVFNfR0VORVJBVEVfREFZUyxcbiAgICAgICAgICAgIEFJUlBPUlRfTlVNX09GX0dBVEVfTEVUVEVSUzogcHJvY2Vzcy5lbnYuQUlSUE9SVF9OVU1fT0ZfR0FURV9MRVRURVJTLFxuICAgICAgICAgICAgQUlSUE9SVF9HQVRFX05VTUJFUlNfUEVSX0xFVFRFUjogcHJvY2Vzcy5lbnYuQUlSUE9SVF9HQVRFX05VTUJFUlNfUEVSX0xFVFRFUixcbiAgICAgICAgICAgIFJFU1VMVFNfUEVSX1BBR0U6IHByb2Nlc3MuZW52LlJFU1VMVFNfUEVSX1BBR0UsXG4gICAgICAgICAgICBJR05PUkVfUkFURV9MSU1JVFM6IHByb2Nlc3MuZW52LklHTk9SRV9SQVRFX0xJTUlUUyxcbiAgICAgICAgICAgIExPQ0tPVVRfQUxMX0tFWVM6IHByb2Nlc3MuZW52LkxPQ0tPVVRfQUxMX0tFWVMsXG4gICAgICAgICAgICBESVNBTExPV0VEX01FVEhPRFM6IHByb2Nlc3MuZW52LkRJU0FMTE9XRURfTUVUSE9EUyxcbiAgICAgICAgICAgIFJFUVVFU1RTX1BFUl9DT05UUklWRURfRVJST1I6IHByb2Nlc3MuZW52LlJFUVVFU1RTX1BFUl9DT05UUklWRURfRVJST1IsXG4gICAgICAgICAgICBNQVhfQ09OVEVOVF9MRU5HVEhfQllURVM6IHByb2Nlc3MuZW52Lk1BWF9DT05URU5UX0xFTkdUSF9CWVRFUyxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoZXNlIG91dCBvZiBleHBlcmltZW50YWwgd2hlbiB0aGV5J3JlIG5vdCBleHBlcmltZW50YWxcbiAgICAgICAgLy8gVE9ETzogYW55bW9yZSFcbiAgICAgICAgZXhwZXJpbWVudGFsOiB7XG4gICAgICAgICAgICBvcHRpb25hbENhdGNoQWxsOiB0cnVlLFxuICAgICAgICAgICAgYXN5bmMgcmV3cml0ZXMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgc291cmNlOiAnL3YxL21ldGEnLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgZGVzdGluYXRpb246ICcvYXBpL3YxL21ldGEnXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiJdfQ==