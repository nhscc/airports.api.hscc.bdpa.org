"use strict";

var _bundleAnalyzer = _interopRequireDefault(require("@next/bundle-analyzer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('./src/dev-utils').populateEnv();

module.exports = () => {
  return (0, _bundleAnalyzer.default)({
    enabled: process.env.ANALYZE === 'true'
  })({
    distDir: 'build',
    webpack: config => {
      config.resolve && (config.resolve.alias = { ...config.resolve.alias,
        universe: `${__dirname}/src/`,
        multiverse: `${__dirname}/lib/`,
        externals: `${__dirname}/external-scripts/`,
        types: `${__dirname}/types/`
      });
      return config;
    },
    env: {
      FLIGHTS_GENERATE_DAYS: process.env.FLIGHTS_GENERATE_DAYS,
      AIRPORT_NUM_OF_GATE_LETTERS: process.env.AIRPORT_NUM_OF_GATE_LETTERS,
      AIRPORT_GATE_NUMBERS_PER_LETTER: process.env.AIRPORT_GATE_NUMBERS_PER_LETTER,
      RESULTS_PER_PAGE: process.env.RESULTS_PER_PAGE,
      IGNORE_RATE_LIMITS: process.env.IGNORE_RATE_LIMITS,
      LOCKOUT_ALL_KEYS: process.env.LOCKOUT_ALL_KEYS,
      DISALLOWED_METHODS: process.env.DISALLOWED_METHODS,
      REQUESTS_PER_CONTRIVED_ERROR: process.env.REQUESTS_PER_CONTRIVED_ERROR,
      MAX_CONTENT_LENGTH_BYTES: process.env.MAX_CONTENT_LENGTH_BYTES
    },

    async rewrites() {
      return [{
        source: '/v1/:path*',
        destination: '/api/v1/:path*'
      }, {
        source: '/v2/:path*',
        destination: '/api/v2/:path*'
      }];
    }

  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy50cyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicG9wdWxhdGVFbnYiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW5hYmxlZCIsInByb2Nlc3MiLCJlbnYiLCJBTkFMWVpFIiwiZGlzdERpciIsIndlYnBhY2siLCJjb25maWciLCJyZXNvbHZlIiwiYWxpYXMiLCJ1bml2ZXJzZSIsIl9fZGlybmFtZSIsIm11bHRpdmVyc2UiLCJleHRlcm5hbHMiLCJ0eXBlcyIsIkZMSUdIVFNfR0VORVJBVEVfREFZUyIsIkFJUlBPUlRfTlVNX09GX0dBVEVfTEVUVEVSUyIsIkFJUlBPUlRfR0FURV9OVU1CRVJTX1BFUl9MRVRURVIiLCJSRVNVTFRTX1BFUl9QQUdFIiwiSUdOT1JFX1JBVEVfTElNSVRTIiwiTE9DS09VVF9BTExfS0VZUyIsIkRJU0FMTE9XRURfTUVUSE9EUyIsIlJFUVVFU1RTX1BFUl9DT05UUklWRURfRVJST1IiLCJNQVhfQ09OVEVOVF9MRU5HVEhfQllURVMiLCJyZXdyaXRlcyIsInNvdXJjZSIsImRlc3RpbmF0aW9uIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBT0FBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQLENBQTJCQyxXQUEzQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE1BQU07QUFDbkIsU0FBTyw2QkFBbUI7QUFDdEJDLElBQUFBLE9BQU8sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BQVosS0FBd0I7QUFEWCxHQUFuQixFQUVKO0FBRUNDLElBQUFBLE9BQU8sRUFBRSxPQUZWO0FBT0NDLElBQUFBLE9BQU8sRUFBR0MsTUFBRCxJQUEyQjtBQUloQ0EsTUFBQUEsTUFBTSxDQUFDQyxPQUFQLEtBQW1CRCxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsS0FBZixHQUF1QixFQUN0QyxHQUFHRixNQUFNLENBQUNDLE9BQVAsQ0FBZUMsS0FEb0I7QUFFdENDLFFBQUFBLFFBQVEsRUFBRyxHQUFFQyxTQUFVLE9BRmU7QUFHdENDLFFBQUFBLFVBQVUsRUFBRyxHQUFFRCxTQUFVLE9BSGE7QUFJdENFLFFBQUFBLFNBQVMsRUFBRyxHQUFFRixTQUFVLG9CQUpjO0FBS3RDRyxRQUFBQSxLQUFLLEVBQUcsR0FBRUgsU0FBVTtBQUxrQixPQUExQztBQVFBLGFBQU9KLE1BQVA7QUFDSCxLQXBCRjtBQXlCQ0osSUFBQUEsR0FBRyxFQUFFO0FBQ0RZLE1BQUFBLHFCQUFxQixFQUFFYixPQUFPLENBQUNDLEdBQVIsQ0FBWVkscUJBRGxDO0FBRURDLE1BQUFBLDJCQUEyQixFQUFFZCxPQUFPLENBQUNDLEdBQVIsQ0FBWWEsMkJBRnhDO0FBR0RDLE1BQUFBLCtCQUErQixFQUFFZixPQUFPLENBQUNDLEdBQVIsQ0FBWWMsK0JBSDVDO0FBSURDLE1BQUFBLGdCQUFnQixFQUFFaEIsT0FBTyxDQUFDQyxHQUFSLENBQVllLGdCQUo3QjtBQUtEQyxNQUFBQSxrQkFBa0IsRUFBRWpCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZZ0Isa0JBTC9CO0FBTURDLE1BQUFBLGdCQUFnQixFQUFFbEIsT0FBTyxDQUFDQyxHQUFSLENBQVlpQixnQkFON0I7QUFPREMsTUFBQUEsa0JBQWtCLEVBQUVuQixPQUFPLENBQUNDLEdBQVIsQ0FBWWtCLGtCQVAvQjtBQVFEQyxNQUFBQSw0QkFBNEIsRUFBRXBCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZbUIsNEJBUnpDO0FBU0RDLE1BQUFBLHdCQUF3QixFQUFFckIsT0FBTyxDQUFDQyxHQUFSLENBQVlvQjtBQVRyQyxLQXpCTjs7QUFxQ0MsVUFBTUMsUUFBTixHQUFpQjtBQUNiLGFBQU8sQ0FDSDtBQUNJQyxRQUFBQSxNQUFNLEVBQUUsWUFEWjtBQUVJQyxRQUFBQSxXQUFXLEVBQUU7QUFGakIsT0FERyxFQUtIO0FBQ0lELFFBQUFBLE1BQU0sRUFBRSxZQURaO0FBRUlDLFFBQUFBLFdBQVcsRUFBRTtBQUZqQixPQUxHLENBQVA7QUFVSDs7QUFoREYsR0FGSSxDQUFQO0FBb0RILENBckREIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdpdGhCdW5kbGVBbmFseXplciBmcm9tICdAbmV4dC9idW5kbGUtYW5hbHl6ZXInXG5cbmltcG9ydCB0eXBlIHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJ3dlYnBhY2snXG5cbi8vID8gTm90IHVzaW5nIEVTNi9UUyBpbXBvcnQgc3ludGF4IGhlcmUgYmVjYXVzZSBkZXYtdXRpbHMgaGFzIHNwZWNpYWxcbi8vID8gY2lyY3Vtc3RhbmNlc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG5yZXF1aXJlKCcuL3NyYy9kZXYtdXRpbHMnKS5wb3B1bGF0ZUVudigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgpID0+IHtcbiAgICByZXR1cm4gd2l0aEJ1bmRsZUFuYWx5emVyKHtcbiAgICAgICAgZW5hYmxlZDogcHJvY2Vzcy5lbnYuQU5BTFlaRSA9PT0gJ3RydWUnXG4gICAgfSkoe1xuICAgICAgICAvLyA/IFJlbmFtZXMgdGhlIGJ1aWxkIGRpciBcImJ1aWxkXCIgaW5zdGVhZCBvZiBcIi5uZXh0XCJcbiAgICAgICAgZGlzdERpcjogJ2J1aWxkJyxcblxuICAgICAgICAvLyA/IFdlYnBhY2sgY29uZmlndXJhdGlvblxuICAgICAgICAvLyAhIE5vdGUgdGhhdCB0aGUgd2VicGFjayBjb25maWd1cmF0aW9uIGlzIGV4ZWN1dGVkIHR3aWNlOiBvbmNlXG4gICAgICAgIC8vICEgc2VydmVyLXNpZGUgYW5kIG9uY2UgY2xpZW50LXNpZGUhXG4gICAgICAgIHdlYnBhY2s6IChjb25maWc6IENvbmZpZ3VyYXRpb24pID0+IHtcbiAgICAgICAgICAgIC8vID8gVGhlc2UgYXJlIGFsaWFzZXMgdGhhdCBjYW4gYmUgdXNlZCBkdXJpbmcgSlMgaW1wb3J0IGNhbGxzXG4gICAgICAgICAgICAvLyAhIElmIGNoYW5nZWQsIGFsc28gdXBkYXRlIHRoZXNlIGFsaWFzZXMgaW4gdHNjb25maWcuanNvbixcbiAgICAgICAgICAgIC8vICEgamVzdC5jb25maWcuanMsIHdlYnBhY2suY29uZmlnLnRzLCBhbmQgLmVzbGludHJjLmpzXG4gICAgICAgICAgICBjb25maWcucmVzb2x2ZSAmJiAoY29uZmlnLnJlc29sdmUuYWxpYXMgPSB7XG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLnJlc29sdmUuYWxpYXMsXG4gICAgICAgICAgICAgICAgdW5pdmVyc2U6IGAke19fZGlybmFtZX0vc3JjL2AsXG4gICAgICAgICAgICAgICAgbXVsdGl2ZXJzZTogYCR7X19kaXJuYW1lfS9saWIvYCxcbiAgICAgICAgICAgICAgICBleHRlcm5hbHM6IGAke19fZGlybmFtZX0vZXh0ZXJuYWwtc2NyaXB0cy9gLFxuICAgICAgICAgICAgICAgIHR5cGVzOiBgJHtfX2Rpcm5hbWV9L3R5cGVzL2AsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyA/IFNlbGVjdCBzb21lIGVudmlyb25tZW50IHZhcmlhYmxlcyBkZWZpbmVkIGluIC5lbnYgdG8gcHVzaCB0byB0aGVcbiAgICAgICAgLy8gPyBjbGllbnQuXG4gICAgICAgIC8vICEhIERPIE5PVCBQVVQgQU5ZIFNFQ1JFVCBFTlZJUk9OTUVOVCBWQVJJQUJMRVMgSEVSRSAhIVxuICAgICAgICBlbnY6IHtcbiAgICAgICAgICAgIEZMSUdIVFNfR0VORVJBVEVfREFZUzogcHJvY2Vzcy5lbnYuRkxJR0hUU19HRU5FUkFURV9EQVlTLFxuICAgICAgICAgICAgQUlSUE9SVF9OVU1fT0ZfR0FURV9MRVRURVJTOiBwcm9jZXNzLmVudi5BSVJQT1JUX05VTV9PRl9HQVRFX0xFVFRFUlMsXG4gICAgICAgICAgICBBSVJQT1JUX0dBVEVfTlVNQkVSU19QRVJfTEVUVEVSOiBwcm9jZXNzLmVudi5BSVJQT1JUX0dBVEVfTlVNQkVSU19QRVJfTEVUVEVSLFxuICAgICAgICAgICAgUkVTVUxUU19QRVJfUEFHRTogcHJvY2Vzcy5lbnYuUkVTVUxUU19QRVJfUEFHRSxcbiAgICAgICAgICAgIElHTk9SRV9SQVRFX0xJTUlUUzogcHJvY2Vzcy5lbnYuSUdOT1JFX1JBVEVfTElNSVRTLFxuICAgICAgICAgICAgTE9DS09VVF9BTExfS0VZUzogcHJvY2Vzcy5lbnYuTE9DS09VVF9BTExfS0VZUyxcbiAgICAgICAgICAgIERJU0FMTE9XRURfTUVUSE9EUzogcHJvY2Vzcy5lbnYuRElTQUxMT1dFRF9NRVRIT0RTLFxuICAgICAgICAgICAgUkVRVUVTVFNfUEVSX0NPTlRSSVZFRF9FUlJPUjogcHJvY2Vzcy5lbnYuUkVRVUVTVFNfUEVSX0NPTlRSSVZFRF9FUlJPUixcbiAgICAgICAgICAgIE1BWF9DT05URU5UX0xFTkdUSF9CWVRFUzogcHJvY2Vzcy5lbnYuTUFYX0NPTlRFTlRfTEVOR1RIX0JZVEVTLFxuICAgICAgICB9LFxuXG4gICAgICAgIGFzeW5jIHJld3JpdGVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJy92MS86cGF0aConLFxuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogJy9hcGkvdjEvOnBhdGgqJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICcvdjIvOnBhdGgqJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246ICcvYXBpL3YyLzpwYXRoKidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiJdfQ==