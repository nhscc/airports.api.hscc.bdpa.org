import * as React from 'react'
import { getEnv } from 'universe/backend/env'
import { getDb, initializeDb, destroyDb } from 'universe/backend/db'
import { hydrateDb, unhydratedDummyDbData } from 'universe/__test__/db'
import { generateFlights } from 'universe/backend'

type Props = {
    previouslyHydratedDb: boolean;
    shouldHydrateDb: boolean;
    isInProduction: boolean;
    nodeEnv: string;
};

let previouslyHydratedDb = false;

export async function getServerSideProps() {
    const env = getEnv();
    const shouldHydrateDb = env.NODE_ENV == 'development' && !previouslyHydratedDb && env.HYDRATE_DB_ON_STARTUP;

    const props = {
        isInProduction: env.NODE_ENV == 'production',
        shouldHydrateDb,
        previouslyHydratedDb,
        nodeEnv: env.NODE_ENV
    };

    if(shouldHydrateDb) {
        const db = await getDb();

        // ? Flights will be generated by generateFlights() instead
        unhydratedDummyDbData.flights = [];

        await destroyDb(db);
        await initializeDb(db);
        await hydrateDb(db, unhydratedDummyDbData);
        await generateFlights();
        previouslyHydratedDb = true;
    }

    return { props };
}

export default function Index({ previouslyHydratedDb, shouldHydrateDb, isInProduction, nodeEnv }: Props) {
    let status = (<span style={{ color: 'gray' }}>unchanged</span>);

    if(previouslyHydratedDb)
        status = (<span style={{ color: 'green' }}>previously hydrated</span>);

    if(shouldHydrateDb)
        status = (
            <React.Fragment>
                <span style={{ color: 'darkred' }}>hydrated</span>{' '}
                <span style={{ fontWeight: 'normal' }}>(you should probably turn HYDRATE_DB_ON_STARTUP off now)</span>
            </React.Fragment>
        );

    return (
        <React.Fragment>
            <p>Psst: there is no web frontend for this API.</p>
            { !isInProduction && <p><strong>{`[ NODE_ENV=${nodeEnv} | db=`}{status}{' ]'}</strong></p> }
        </React.Fragment>
    );
}
